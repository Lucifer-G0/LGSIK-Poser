import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 原始数据

# HMD-Poser window_size=120    11725it [07:26, 26.24it/s]
# MPJPE:  tensor(3.2165, device='cuda:0')
# data = np.array([3.6021, 3.4710, 3.4130, 3.3829, 3.3626, 3.3475, 3.3367, 3.3237, 3.3136,
#                  3.3040, 3.2960, 3.2845, 3.2752, 3.2656, 3.2569, 3.2494, 3.2409, 3.2325,
#                  3.2247, 3.2172, 3.2106, 3.2060, 3.2018, 3.1994, 3.1985, 3.1975, 3.1970,
#                  3.1978, 3.1959, 3.1943, 3.1925, 3.1899, 3.1867, 3.1847, 3.1839, 3.1838,
#                  3.1846, 3.1870, 3.1903, 3.1929, 3.1952, 3.1953, 3.1944, 3.1936, 3.1932,
#                  3.1932, 3.1914, 3.1904, 3.1865, 3.1842, 3.1827, 3.1823, 3.1821, 3.1833,
#                  3.1861, 3.1879, 3.1902, 3.1926, 3.1927, 3.1923, 3.1910, 3.1900, 3.1877,
#                  3.1864, 3.1867, 3.1871, 3.1899, 3.1927, 3.1961, 3.1991, 3.2023, 3.2025,
#                  3.2022, 3.2014, 3.2012, 3.2014, 3.1993, 3.1983, 3.1942, 3.1919, 3.1915,
#                  3.1916, 3.1917, 3.1933, 3.1963, 3.1977, 3.1993, 3.2014, 3.2014, 3.2007,
#                  3.1993, 3.1980, 3.1961, 3.1948, 3.1950, 3.1956, 3.1986, 3.2010, 3.2044,
#                  3.2078, 3.2108, 3.2114, 3.2113, 3.2103, 3.2096, 3.2092, 3.2066, 3.2053,
#                  3.2000, 3.1969, 3.1959, 3.1951, 3.1948, 3.1961, 3.1981, 3.1989, 3.2002,
#                  3.2017, 3.2011, 3.2002])

# HMD-Poser window_size=40      38887it [13:41, 47.33it/s]
# MPJPE:  tensor(3.1844, device='cuda:0')
# data = np.array([3.5483, 3.4156, 3.3593, 3.3270, 3.3041, 3.2868, 3.2719, 3.2574, 3.2439,
#         3.2313, 3.2200, 3.2080, 3.1974, 3.1877, 3.1792, 3.1722, 3.1654, 3.1599,
#         3.1539, 3.1479, 3.1424, 3.1374, 3.1325, 3.1287, 3.1259, 3.1233, 3.1208,
#         3.1199, 3.1172, 3.1154, 3.1136, 3.1114, 3.1090, 3.1076, 3.1068, 3.1062,
#         3.1055, 3.1061, 3.1050, 3.1043])


# Latest window_size=40         38887it [10:02, 64.50it/s]
# MPJPE:  tensor(3.1900, device='cuda:0')
# data = np.array([3.4839, 3.3974, 3.3589, 3.3334, 3.3135, 3.2964, 3.2810, 3.2675, 3.2549,
#         3.2427, 3.2308, 3.2195, 3.2084, 3.1985, 3.1899, 3.1821, 3.1744, 3.1682,
#         3.1623, 3.1567, 3.1511, 3.1460, 3.1409, 3.1368, 3.1335, 3.1307, 3.1277,
#         3.1259, 3.1240, 3.1221, 3.1198, 3.1179, 3.1157, 3.1142, 3.1134, 3.1127,
#         3.1116, 3.1116, 3.1114, 3.1111])


# Latest window_size=120 11725it [03:15, 60.10it/s]
# MPJPE:  tensor(3.1975, device='cuda:0')
# data = np.array([3.5043, 3.4191, 3.3830, 3.3602, 3.3427, 3.3277, 3.3146, 3.3027, 3.2916,
#         3.2803, 3.2695, 3.2602, 3.2510, 3.2422, 3.2339, 3.2266, 3.2191, 3.2125,
#         3.2060, 3.2007, 3.1944, 3.1887, 3.1823, 3.1768, 3.1729, 3.1703, 3.1681,
#         3.1677, 3.1679, 3.1667, 3.1661, 3.1651, 3.1645, 3.1658, 3.1677, 3.1687,
#         3.1695, 3.1706, 3.1714, 3.1719, 3.1719, 3.1731, 3.1733, 3.1736, 3.1734,
#         3.1734, 3.1723, 3.1717, 3.1707, 3.1707, 3.1697, 3.1687, 3.1669, 3.1647,
#         3.1641, 3.1645, 3.1651, 3.1669, 3.1690, 3.1697, 3.1711, 3.1716, 3.1723,
#         3.1747, 3.1774, 3.1795, 3.1808, 3.1822, 3.1833, 3.1837, 3.1837, 3.1847,
#         3.1852, 3.1856, 3.1855, 3.1854, 3.1843, 3.1839, 3.1829, 3.1829, 3.1817,
#         3.1806, 3.1786, 3.1764, 3.1756, 3.1759, 3.1762, 3.1778, 3.1797, 3.1807,
#         3.1819, 3.1820, 3.1826, 3.1845, 3.1869, 3.1885, 3.1895, 3.1909, 3.1920,
#         3.1927, 3.1927, 3.1939, 3.1944, 3.1947, 3.1944, 3.1940, 3.1924, 3.1914,
#         3.1901, 3.1897, 3.1879, 3.1862, 3.1836, 3.1806, 3.1790, 3.1784, 3.1778,
#         3.1787, 3.1800, 3.1805])

# 微调版本
# Latest window_size=40         38887it [10:11, 63.60it/s]
# MPJPE:  tensor(3.1175, device='cuda:0')
# data = np.array([3.4326, 3.3376, 3.2934, 3.2643, 3.2418, 3.2231, 3.2062, 3.1916, 3.1782,
#         3.1657, 3.1535, 3.1417, 3.1304, 3.1208, 3.1126, 3.1053, 3.0978, 3.0917,
#         3.0864, 3.0814, 3.0762, 3.0714, 3.0667, 3.0629, 3.0601, 3.0576, 3.0548,
#         3.0532, 3.0520, 3.0508, 3.0489, 3.0472, 3.0453, 3.0438, 3.0432, 3.0428,
#         3.0419, 3.0420, 3.0424, 3.0425])


# Latest window_size=120 11725it [03:20, 58.60it/s]
# MPJPE:  tensor(3.1321, device='cuda:0')
# data = np.array([3.4560, 3.3619, 3.3201, 3.2936, 3.2732, 3.2569, 3.2424, 3.2287, 3.2173,
#         3.2061, 3.1954, 3.1857, 3.1762, 3.1675, 3.1598, 3.1530, 3.1458, 3.1397,
#         3.1334, 3.1286, 3.1230, 3.1181, 3.1126, 3.1079, 3.1050, 3.1028, 3.1005,
#         3.1002, 3.1010, 3.1002, 3.0997, 3.0986, 3.0979, 3.0988, 3.0998, 3.1011,
#         3.1022, 3.1033, 3.1048, 3.1061, 3.1067, 3.1079, 3.1080, 3.1079, 3.1082,
#         3.1082, 3.1071, 3.1067, 3.1060, 3.1060, 3.1054, 3.1053, 3.1037, 3.1022,
#         3.1024, 3.1028, 3.1032, 3.1048, 3.1072, 3.1082, 3.1093, 3.1094, 3.1097,
#         3.1116, 3.1132, 3.1154, 3.1171, 3.1180, 3.1196, 3.1208, 3.1212, 3.1221,
#         3.1223, 3.1223, 3.1224, 3.1220, 3.1207, 3.1202, 3.1193, 3.1191, 3.1181,
#         3.1176, 3.1158, 3.1140, 3.1139, 3.1141, 3.1142, 3.1154, 3.1176, 3.1187,
#         3.1197, 3.1193, 3.1196, 3.1210, 3.1223, 3.1240, 3.1252, 3.1262, 3.1279,
#         3.1291, 3.1295, 3.1304, 3.1306, 3.1302, 3.1298, 3.1292, 3.1272, 3.1262,
#         3.1250, 3.1245, 3.1229, 3.1219, 3.1195, 3.1169, 3.1161, 3.1155, 3.1148,
#         3.1155, 3.1172, 3.1179])
data = np.array([3.0702, 2.9841, 2.9486, 2.9244, 2.9059, 2.8907, 2.8774, 2.8656, 2.8552,
        2.8457, 2.8372, 2.8295, 2.8225, 2.8163, 2.8108, 2.8059, 2.8015, 2.7976,
        2.7942, 2.7912, 2.7885, 2.7862, 2.7843, 2.7826, 2.7811, 2.7799, 2.7788,
        2.7779, 2.7771, 2.7765, 2.7760, 2.7756, 2.7754, 2.7752, 2.7751, 2.7751,
        2.7751, 2.7753, 2.7754, 2.7757])



# 归一化到 [0, 1]
normalized = data  #  - np.min(data) )/ (np.max(data) - np.min(data))

# reshape 为 (1, 40) 或者 (5, 8)，这里我们用 (5, 8) 更像一个热图
heatmap_data = normalized.reshape(-1, 8)

# 使用 seaborn 或 matplotlib 画热图
plt.figure(figsize=(8, 4))
sns.heatmap(heatmap_data, cmap='viridis', annot=True, fmt=".4f", cbar=True)

plt.title("Frame-wise MPJPE Heatmap")
plt.tight_layout()
plt.savefig("heatmap.pdf", format='pdf', bbox_inches='tight')
plt.show()
